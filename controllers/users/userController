const userModel = require('../../models/userModel');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');

const handleErrorResponse = (res, status, message) => res.status(status).json({ message });

const userRegister = async (req, res) => {
  const hashedPassword = await bcrypt.hash(req.body.password, 10);

  try {
      const user = await userModel.create({
        firstName: req.body.firstName,
        lastName: req.body.lastName,
        phone: req.body.phone,
        email: req.body.email,
        password: hashedPassword,
      });
      return handleErrorResponse(res, 201, 'User registered successfully!');

  } catch (error) {
      return handleErrorResponse(res, 500, 'Something went wrong!');
  }

};

const userLogin = async (req, res) => {
  try {
    const { email, password } = req.body;

    // Check if user exists
    const user = await userModel.findOne({ email });
    if (!user) return res.status(400).json({ message: "Invalid credentials" });

    // Validate password
    const isMatch = await bcrypt.compare(password, user.password);
    if (!isMatch) return res.status(400).json({ message: "Invalid credentials" });

    // Generate JWT Token
    const token = jwt.sign({ id: user._id }, process.env.JWT_SECRET, { expiresIn: "1h" });

    return res.status(200).json({ token });
  } catch (error) {
    return res.status(500).json({ error: 'Something went wrong!' });
  }
};

module.exports = {
  userRegister,
  userLogin
};